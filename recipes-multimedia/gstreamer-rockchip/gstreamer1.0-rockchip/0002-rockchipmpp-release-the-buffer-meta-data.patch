From b79ce37158d21f04f42835a7831b2521a513d6c2 Mon Sep 17 00:00:00 2001
From: ayaka <ayaka@soulik.info>
Date: Wed, 7 Jun 2017 22:37:14 +0800
Subject: [PATCH] rockchipmpp: release the buffer meta data

I forget to release them when merging a bunch of patches.
But it is still safe as they comes from slice memory.

Signed-off-by: ayaka <ayaka@soulik.info>
---
 gst/rockchipmpp/gstmppallocator.c     | 17 ++++++++---------
 gst/rockchipmpp/gstmppdecbufferpool.c |  4 +++-
 2 files changed, 11 insertions(+), 10 deletions(-)

diff --git a/gst/rockchipmpp/gstmppallocator.c b/gst/rockchipmpp/gstmppallocator.c
index 9c07d1d..d6a349d 100644
--- a/gst/rockchipmpp/gstmppallocator.c
+++ b/gst/rockchipmpp/gstmppallocator.c
@@ -42,6 +42,7 @@ GST_DEBUG_CATEGORY_STATIC (mppallocator_debug);
 gboolean
 gst_is_mpp_memory (GstMemory * mem)
 {
+
   return gst_memory_is_type (mem, GST_MPP_MEMORY_TYPE);
 }
 
@@ -133,8 +134,6 @@ static void
 gst_mpp_allocator_dispose (GObject * obj)
 {
   GST_LOG_OBJECT (obj, "called");
-  /* Don't need cleanup buffers from allocator again,
-   * the free() method have done that */
 
   G_OBJECT_CLASS (parent_class)->dispose (obj);
 }
@@ -168,6 +167,12 @@ gst_mpp_allocator_stop (GstMppAllocator * allocator)
 
   if (!g_atomic_int_get (&allocator->active))
     goto done;
+
+  if (allocator->mpp_mem_pool) {
+    mpp_buffer_group_put (allocator->mpp_mem_pool);
+    allocator->mpp_mem_pool = NULL;
+  }
+
   if (gst_atomic_queue_length (allocator->free_queue) != allocator->count) {
     GST_DEBUG_OBJECT (allocator, "allocator is still in use");
     ret = -EBUSY;
@@ -186,11 +191,6 @@ gst_mpp_allocator_stop (GstMppAllocator * allocator)
 
   allocator->count = 0;
 
-  if (allocator->mpp_mem_pool) {
-    mpp_buffer_group_put (allocator->mpp_mem_pool);
-    allocator->mpp_mem_pool = NULL;
-  }
-
   g_atomic_int_set (&allocator->active, FALSE);
 done:
   GST_OBJECT_UNLOCK (allocator);
@@ -200,10 +200,9 @@ done:
 static void
 gst_mpp_allocator_free (GstAllocator * gallocator, GstMemory * gmem)
 {
-  GstMppAllocator *allocator = GST_MPP_ALLOCATOR (gallocator);
   GstMppMemory *mem = (GstMppMemory *) gmem;
 
-  gst_atomic_queue_push (allocator->free_queue, mem);
+  _mppmem_free (mem);
 }
 
 GstMemory *
diff --git a/gst/rockchipmpp/gstmppdecbufferpool.c b/gst/rockchipmpp/gstmppdecbufferpool.c
index a6cbd71..7c71ab4 100644
--- a/gst/rockchipmpp/gstmppdecbufferpool.c
+++ b/gst/rockchipmpp/gstmppdecbufferpool.c
@@ -136,7 +136,7 @@ gst_mpp_dec_buffer_pool_stop (GstBufferPool * bpool)
       GstBuffer *buffer = pool->buffers[n];
 
       pool->buffers[n] = NULL;
-      gst_buffer_unref (buffer);
+      pclass->release_buffer (bpool, buffer);
 
       g_atomic_int_add (&pool->num_queued, -1);
     }
@@ -279,11 +279,13 @@ mpp_eos:
   }
 mpp_error:
   {
+    *buffer = NULL;
     GST_ERROR_OBJECT (pool, "mpp error %d", ret);
     return GST_FLOW_ERROR;
   }
 no_buffer:
   {
+    *buffer = NULL;
     GST_ERROR_OBJECT (pool, "No free buffer found in the pool at index %d",
         buf_index);
     return GST_FLOW_ERROR;
-- 
1.9.1

